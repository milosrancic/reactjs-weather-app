{"version":3,"sources":["components/DisplayWeather.js","components/App.js","index.js"],"names":["DisplayWeather","lat","Number","this","props","latitude","toFixed","lon","longitude","isWeatherLoaded","isLocationLoaded","tempCategory","id","className","weatherDetail","temp","onClick","setCelsius","type","setFaren","setKelvin","color","height","width","city","country","format","ticking","React","Component","weatherKey","App","getLocation","navigator","geolocation","getCurrentPosition","position","coords","setState","currLat","currLon","getWeather","error","console","log","axios","get","state","then","response","tempK","data","main","tempC","tempF","name","sys","toString","currTempK","currTempF","currTempC","weather","description","catch","handleKelvin","handleCelsius","handleFaren","celsius","faren","href","target","rel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8efd536.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactLoading from \"react-loading\";\nimport Clock from \"react-live-clock\";\n\nimport \"../css/DisplayWeather.css\";\n\nclass DisplayWeather extends React.Component {\n  render() {\n    let lat = Number(this.props.latitude).toFixed(2) + \"° N\";\n    let lon = Number(this.props.longitude).toFixed(2) + \"° E\";\n\n    let isWeatherLoaded = this.props.isWeatherLoaded;\n    let isLocationLoaded = this.props.isLocationLoaded;\n\n    let tempCategory = this.props.tempCategory;\n\n    return (\n      <div id=\"display-weather\">\n        <p className=\"conditions-p\">The current weather condition is:</p>\n\n        {isWeatherLoaded ? (\n          <div>\n            <div className=\"weather-div\">\n              <p>{this.props.weatherDetail}</p>\n              <p>{this.props.temp}</p>\n            </div>\n\n            <div className=\"buttons\">\n              {tempCategory === \"Celsius\" ? (\n                <button\n                  onClick={this.props.setCelsius}\n                  type=\"button\"\n                  className=\"active-button\"\n                >\n                  Celsius\n                </button>\n              ) : (\n                <button onClick={this.props.setCelsius} type=\"button\">\n                  Celsius\n                </button>\n              )}\n\n              {tempCategory === \"Faren\" ? (\n                <button\n                  onClick={this.props.setFaren}\n                  type=\"button\"\n                  className=\"active-button\"\n                >\n                  Fahrenheit\n                </button>\n              ) : (\n                <button onClick={this.props.setFaren} type=\"button\">\n                  Fahrenheit\n                </button>\n              )}\n\n              {tempCategory === \"Kelvin\" ? (\n                <button\n                  onClick={this.props.setKelvin}\n                  type=\"button\"\n                  className=\"active-button\"\n                >\n                  Kelvin\n                </button>\n              ) : (\n                <button onClick={this.props.setKelvin} type=\"button\">\n                  Kelvin\n                </button>\n              )}\n            </div>\n          </div>\n        ) : (\n          <ReactLoading\n            className=\"loader-1\"\n            type={\"spin\"}\n            color={\"#FEC109\"}\n            height={50}\n            width={50}\n          />\n        )}\n\n        {isLocationLoaded ? (\n          <div className=\"location-div\">\n            <p>\n              <small>Your approximate location is: </small>\n              <span className=\"location-span\">\n                {this.props.city}, {this.props.country}\n              </span>\n            </p>\n            <p>\n              <small>Your coordinates are: </small>\n              <span className=\"location-span\">\n                {lat}, {lon}\n              </span>\n            </p>\n          </div>\n        ) : (\n          <ReactLoading\n            className=\"loader-2\"\n            type={\"spin\"}\n            color={\"#FEC109\"}\n            height={50}\n            width={50}\n          />\n        )}\n\n        <Clock format={\"HH:mm:ss\"} ticking={true} className=\"clock\" />\n      </div>\n    );\n  }\n}\n\nexport default DisplayWeather;\n","import React from \"react\";\nimport axios from \"axios\";\n\nimport DisplayWeather from \"./DisplayWeather\";\nimport \"./../css/App.css\";\n\nconst weatherKey = \"b06eb1f3919ecfd295b8f717f2ad73c0\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      city: \"\",\n      country: \"\",\n      currLat: \"\",\n      currLon: \"\",\n      temp: \"\",\n      tempCategory: \"Celsius\",\n      currTempK: \"\",\n      currTempC: \"\",\n      currTempF: \"\",\n      weatherDetail: \"\",\n      isWeatherLoaded: false,\n      isLocationLoaded: false\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.getLocation();\n  }\n\n  getLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        position => {\n          const latitude = position.coords.latitude;\n          const longitude = position.coords.longitude;\n          this.setState({\n            isLocationLoaded: true,\n            currLat: latitude,\n            currLon: longitude\n          });\n          this.getWeather();\n        },\n        error => {\n          console.log(error);\n          this.setState({\n            isLocationLoaded: false\n          });\n        }\n      );\n    }\n  };\n\n  getWeather = () => {\n    axios\n      .get(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${this.state.currLat}&lon=${this.state.currLon}&APPID=${weatherKey}`\n      )\n      .then(response => {\n        let tempK = response.data.main.temp;\n        let tempC = tempK - 273.15;\n        let tempF = tempC * 1.8 + 32;\n        this.setState({\n          city: response.data.name,\n          country: response.data.sys.country,\n          temp: tempC.toFixed(2).toString() + \"°C\",\n          currTempK: tempK.toString() + \"K\",\n          currTempF: tempF.toFixed(2).toString() + \"°F\",\n          currTempC: tempC.toFixed(2).toString() + \"°C\",\n          weatherDetail: response.data.weather[0].description,\n          isWeatherLoaded: true\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  handleKelvin = () => {\n    this.setState({ temp: this.state.currTempK, tempCategory: \"Kelvin\" });\n  };\n\n  handleCelsius = () => {\n    this.setState({ temp: this.state.currTempC, tempCategory: \"Celsius\" });\n  };\n\n  handleFaren = () => {\n    this.setState({ temp: this.state.currTempF, tempCategory: \"Faren\" });\n  };\n\n  render() {\n    return (\n      <div id=\"app\">\n        <h1>Current Weather</h1>\n        <DisplayWeather\n          setFaren={this.handleFaren}\n          setCelsius={this.handleCelsius}\n          setKelvin={this.handleKelvin}\n          temp={this.state.temp}\n          tempCategory={this.state.tempCategory}\n          latitude={this.state.currLat}\n          longitude={this.state.currLon}\n          city={this.state.city}\n          country={this.state.country}\n          celsius={this.state.currTempC}\n          faren={this.state.currTempF}\n          weatherDetail={this.state.weatherDetail}\n          isWeatherLoaded={this.state.isWeatherLoaded}\n          isLocationLoaded={this.state.isLocationLoaded}\n        />\n\n        <p>\n          <a\n            href=\"https://github.com/milosrancic\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <i className=\"fab fa-github\" />\n          </a>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}